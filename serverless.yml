service: lambda-batch-poc
frameworkVersion: '2'
useDotenv: true
plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stackName: lambda-batch-eod-sftp-request-training-stack
  lambdaHashingVersion: 20201221
  stage: ${env:STAGE}
  region: ap-southeast-1
  environment:
    DB_MASTER_HOST: ${env:DB_MASTER_HOST}
    DB_MASTER_USERNAME: ${env:DB_MASTER_USERNAME}
    DB_MASTER_PASSWORD: ${env:DB_MASTER_PASSWORD}
    DB_MASTER_DATABASE: ${env:DB_MASTER_DATABASE}
    SFTP_LMS_HOST: ${env:SFTP_LMS_HOST}
    SFTP_LMS_PORT: ${env:SFTP_LMS_PORT}
    SFTP_LMS_USERNAME: ${env:SFTP_LMS_USERNAME}
    SFTP_LMS_PRIVATE_KEY: ${env:SFTP_LMS_PRIVATE_KEY}


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  eod-sftp-readfile-request-training:
    handler: action/eod-sftp-readfile-request-training.index
    name: eod-sftp-readfile-request-training-${env:STAGE}
    description: "This function is used to retrieve employee information file from SFTP then this system will sending an email to manager for approve the training."
    memorySize: 4096
    timeout: 900
    disableLogs: false
    environment:
      SFTP_LMS_PATH_READFILE: ${env:SFTP_LMS_PATH_READFILE}
      AWS_S3_BUCKET_REQUEST_TRAINING: ${env:AWS_S3_BUCKET_REQUEST_TRAINING}
    tags:
      Name: eod-sftp-readfile-request-training
      Project: TidlorTidrian
      Environment: ${env:ENVIROMENT}
    events:
      - schedule:
          name: eod-sftp-readfile-request-training-event-${env:STAGE}
          description: 'your scheduled event for get file from sftp'
          rate: cron(10 10 * * ? *)
          
#  eod-sftp-writefile-request-training:
#    handler: action/eod-sftp-writefile-request-training.index
#    name: eod-sftp-writefile-request-training-${env:STAGE}
#    description: "This function is used to write file employee information file from MainWeb when manager approved/reject all request training transaction"
#    memorySize: 4096
#    timeout: 900
#    disableLogs: false
#    environment:
#      SFTP_LMS_PATH_WRITEFILE: ${env:SFTP_LMS_PATH_WRITEFILE}
#      AWS_S3_BUCKET_REQUEST_TRAINING: ${env:AWS_S3_BUCKET_REQUEST_TRAINING}
#    tags:
#      Name: eod-sftp-writefile-request-training
#      Project: TidlorTidrian
#      Environment: ${env:ENVIROMENT}
#    events:
#      - schedule:
#          name: eod-sftp-writefile-request-training-event-${env:STAGE}
#          description: 'your scheduled event for write file to sftp'
#          rate: cron(00 02 * * ? *)

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
